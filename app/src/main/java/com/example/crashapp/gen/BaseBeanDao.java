package com.example.crashapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.crashapp.service.entity.BaseBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BASE_BEAN".
*/
public class BaseBeanDao extends AbstractDao<BaseBean, Void> {

    public static final String TABLENAME = "BASE_BEAN";

    /**
     * Properties of entity BaseBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Code = new Property(0, int.class, "code", false, "CODE");
        public final static Property Errormsg = new Property(1, int.class, "errormsg", false, "ERRORMSG");
    }


    public BaseBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BaseBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASE_BEAN\" (" + //
                "\"CODE\" INTEGER NOT NULL ," + // 0: code
                "\"ERRORMSG\" INTEGER NOT NULL );"); // 1: errormsg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BaseBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCode());
        stmt.bindLong(2, entity.getErrormsg());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BaseBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCode());
        stmt.bindLong(2, entity.getErrormsg());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BaseBean readEntity(Cursor cursor, int offset) {
        BaseBean entity = new BaseBean( //
            cursor.getInt(offset + 0), // code
            cursor.getInt(offset + 1) // errormsg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BaseBean entity, int offset) {
        entity.setCode(cursor.getInt(offset + 0));
        entity.setErrormsg(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BaseBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BaseBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(BaseBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
