package com.example.crashapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.crashapp.service.entity.UserInformation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFORMATION".
*/
public class UserInformationDao extends AbstractDao<UserInformation, Long> {

    public static final String TABLENAME = "USER_INFORMATION";

    /**
     * Properties of entity UserInformation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserMs = new Property(2, String.class, "userMs", false, "USER_MS");
        public final static Property UserIsExist = new Property(3, Boolean.class, "userIsExist", false, "USER_IS_EXIST");
    }


    public UserInformationDao(DaoConfig config) {
        super(config);
    }
    
    public UserInformationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFORMATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: userId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_MS\" TEXT," + // 2: userMs
                "\"USER_IS_EXIST\" INTEGER);"); // 3: userIsExist
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFORMATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInformation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userMs = entity.getUserMs();
        if (userMs != null) {
            stmt.bindString(3, userMs);
        }
 
        Boolean userIsExist = entity.getUserIsExist();
        if (userIsExist != null) {
            stmt.bindLong(4, userIsExist ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInformation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userMs = entity.getUserMs();
        if (userMs != null) {
            stmt.bindString(3, userMs);
        }
 
        Boolean userIsExist = entity.getUserIsExist();
        if (userIsExist != null) {
            stmt.bindLong(4, userIsExist ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserInformation readEntity(Cursor cursor, int offset) {
        UserInformation entity = new UserInformation( //
            cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userMs
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // userIsExist
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInformation entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserMs(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserIsExist(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInformation entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInformation entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInformation entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
